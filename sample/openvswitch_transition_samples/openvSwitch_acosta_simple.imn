node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
    }
    canvas c1
    iconcoords {102.0 416.0}
    labelcoords {102.0 448.0}
    services {DefaultRoute IPForward UserDefined}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	route add -net default eth0
	}
    }
}

node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth2
	!
	interface eth1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {98.0 196.0}
    labelcoords {98.0 228.0}
    services {IPForward UserDefined}
    interface-peer {eth0 n3}
    interface-peer {eth1 n2}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/etc/openvswitch', '/var/log/openvswitch', '/var/run/openvswitch', )
	files=('custom_ovs.sh', )
	cmdup=('bash custom_ovs.sh', )
	cmddown=('killall ovs-vswitchd', 'killall ovsdb-server', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom_ovs.sh
	custom-command custom_ovs.sh
	config {
	#!/bin/bash
	
	/etc/init.d/openvswitch-switch start > /dev/null
	
	ovs-vsctl add-br mybridge
	ifconfig mybridge up
	
	ovs-vsctl add-port mybridge eth0
	ovs-vsctl add-port mybridge eth1
	ovs-vsctl add-port mybridge eth2
	
	ovs-ofctl add-flow mybridge ip,nw_dst=10.0.1.2/24,actions=output:2
	ovs-ofctl add-flow mybridge ip,nw_dst=10.0.0.1/24,actions=output:1
	
	#sometime during the scenario, to test that the swapping works, execute the following to modify the flow table:
	#ovs-ofctl add-flow mybridge ip,nw_dst=10.0.1.2/24,actions=output:3
	
	route add -net default mybridge
	}
    }
    interface-peer {eth2 n4}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	 mac address 00:11:00:00:00:00
	!
    }
    canvas c1
    iconcoords {314.0 141.0}
    labelcoords {314.0 173.0}
    services {DefaultRoute IPForward}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	route add -net default eth0
	}
    }
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.1.2/24
	 mac address 00:11:00:00:00:00
	!
    }
    canvas c1
    iconcoords {363.0 284.0}
    labelcoords {363.0 316.0}
    services {DefaultRoute IPForward}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	route add -net default eth0
	}
    }
}

link l1 {
    nodes {n3 n1}
    bandwidth 0
}

link l2 {
    nodes {n1 n2}
    bandwidth 0
}

link l3 {
    nodes {n1 n4}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

