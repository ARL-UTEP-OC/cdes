node n2 {
    type router
    model OVS
    network-config {
	hostname ovs1
	!
	interface eth2
	!
	interface eth1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {230.0 292.0}
    labelcoords {230.0 324.0}
    interface-peer {eth0 n6}
    interface-peer {eth1 n4}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself
	ovs-vsctl add-br ovsbr0 
	## Set the default device to the bridge so that it can handle where packets go
	route add -net default ovsbr0
	
	## Now add all our interfaces as ports to the switch
	ovs-vsctl add-port ovsbr0 eth0
	ovs-vsctl add-port ovsbr0 eth1
	ovs-vsctl add-port ovsbr0 eth2
	
	}
    }
    services {OvsService IPForward}
    interface-peer {eth2 n1}
}

node n3 {
    type router
    model OVS
    network-config {
	hostname ovs2
	!
	interface eth2
	!
	interface eth1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {505.0 285.0}
    labelcoords {505.0 317.0}
    interface-peer {eth0 n7}
    interface-peer {eth1 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself
	ovs-vsctl add-br ovsbr0
	## Set the default device to the bridge so that it can handle where packets go
	route add -net default ovsbr0
	
	## Now add all our interfaces as ports to the switch
	ovs-vsctl add-port ovsbr0 eth0
	ovs-vsctl add-port ovsbr0 eth1
	ovs-vsctl add-port ovsbr0 eth2
	
	}
    }
    services {OvsService}
    interface-peer {eth2 n1}
}

node n4 {
    type router
    model host
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.1.10/24
	 ipv6 address 2001:1::10/64
	!
    }
    canvas c1
    iconcoords {96.0 220.0}
    labelcoords {96.0 252.0}
    interface-peer {eth0 n2}
}

node n5 {
    type router
    model host
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 10.0.5.10/24
	 ipv6 address 2001:5::10/64
	!
    }
    canvas c1
    iconcoords {651.0 348.0}
    labelcoords {651.0 380.0}
    interface-peer {eth0 n3}
}

node n6 {
    type router
    model host
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.1.11/24
	 ipv6 address 2001:1::11/64
	!
    }
    canvas c1
    iconcoords {87.0 348.0}
    labelcoords {87.0 380.0}
    interface-peer {eth0 n2}
}

node n7 {
    type router
    model host
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.5.11/24
	 ipv6 address 2001:5::11/64
	!
    }
    canvas c1
    iconcoords {634.0 215.0}
    labelcoords {634.0 247.0}
    interface-peer {eth0 n3}
}

node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth1
	 ip address 10.0.5.1/24
	 ipv6 address 2001:5::1/64
	!
	interface eth0
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
    }
    canvas c1
    iconcoords {374.0 288.0}
    labelcoords {374.0 320.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n3}
    services {DefaultRoute IPForward}
}

link l1 {
    nodes {n2 n6}
    bandwidth 0
}

link l2 {
    nodes {n2 n4}
    bandwidth 0
}

link l3 {
    nodes {n3 n7}
    bandwidth 0
}

link l4 {
    nodes {n3 n5}
    bandwidth 0
}

link l5 {
    nodes {n2 n1}
    bandwidth 0
}

link l6 {
    nodes {n3 n1}
    bandwidth 0
}

annotation a1 {
    iconcoords {238.0 114.0}
    type text
    label {OVS routers act as normal switches}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a2 {
    iconcoords {111.0 411.0}
    type text
    label {1. from n4, "ping 10.0.1.11"}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a3 {
    iconcoords {114.0 452.0}
    type text
    label {Notice that traffic traverses the network normally and through a legacy router}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
    mac_address_start 80
}

option session {
}

