node n3 {
    type lanswitch
    network-config {
	hostname n3
	!
    }
    canvas c1
    iconcoords {634.0 276.0}
    labelcoords {634.0 300.0}
    interface-peer {e1 n7}
    interface-peer {e2 n8}
    interface-peer {e0 n2}
}

node n7 {
    type router
    model PC
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.2.20/24
	 ipv6 address 2001:2::20/64
	!
    }
    canvas c1
    iconcoords {764.0 173.0}
    labelcoords {764.0 205.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	route add -net default eth0
	}
    }
    services {DefaultRoute}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.2.21/24
	 ipv6 address 2001:2::21/64
	!
    }
    canvas c1
    iconcoords {801.0 307.0}
    labelcoords {801.0 339.0}
    interface-peer {eth0 n3}
}

node n4 {
    type lanswitch
    network-config {
	hostname n4
	!
    }
    canvas c1
    iconcoords {127.0 286.0}
    labelcoords {127.0 310.0}
    interface-peer {e0 n6}
    interface-peer {e1 n10}
    interface-peer {e2 n1}
}

node n6 {
    type router
    model PC
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.0.20/24
	 ipv6 address 2001:0::20/64
	!
    }
    canvas c1
    iconcoords {64.0 211.0}
    labelcoords {64.0 243.0}
    interface-peer {eth0 n4}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	route add -net default eth0
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n10 {
    type router
    model PC
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.0.21/24
	 ipv6 address 2001:0::21/64
	!
    }
    canvas c1
    iconcoords {51.0 332.0}
    labelcoords {51.0 364.0}
    interface-peer {eth0 n4}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	route add -net default eth0
	}
    }
    services {DefaultRoute}
}

node n1 {
    type router
    model OVS
    network-config {
	hostname n1
	!
	interface eth3
	 ip address 10.0.6.1/24
	 ipv6 address 2001:6::1/64
	!
	interface eth2
	!
	interface eth1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {259.0 255.0}
    labelcoords {259.0 287.0}
    interface-peer {eth0 n4}
    interface-peer {eth1 n2}
    interface-peer {eth2 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br ovsbr0 -- set Bridge ovsbr0 fail-mode=secure
	route add -net default ovsbr0
	
	## Now add all our interfaces as ports to the switch
	ovs-vsctl add-port ovsbr0 eth0
	ovs-vsctl add-port ovsbr0 eth1
	ovs-vsctl add-port ovsbr0 eth2
	
	###Set our datapath id so that it's easier when referenced from the controller
	ovs-vsctl set bridge ovsbr0 other-config:datapath-id=10000
	
	
	##No flow entries; these will be retrieved from the controller
	ovs-vsctl set-controller ovsbr0 tcp:10.0.6.10:6633
	}
    }
    services {OvsService}
    interface-peer {eth3 n11}
}

node n2 {
    type router
    model OVS
    network-config {
	hostname n2
	!
	interface eth2
	!
	interface eth1
	!
	interface eth0
	!
	interface eth3
	 ip address 10.0.7.1/24
	 ipv6 address 2001:7::1/64
	!
    }
    canvas c1
    iconcoords {455.0 241.0}
    labelcoords {455.0 273.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n3}
    interface-peer {eth2 n9}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br ovsbr0
	route add -net default ovsbr0
	
	## Now add all our interfaces as ports to the switch
	ovs-vsctl add-port ovsbr0 eth0
	ovs-vsctl add-port ovsbr0 eth1
	ovs-vsctl add-port ovsbr0 eth2
	
	## Change datapath id so that it's easier referenced from the controller
	ovs-vsctl set bridge ovsbr0 other-config:datapath-id=10000
	
	###No flow entries, since these are retrieved from the controller
	ovs-vsctl set-controller ovsbr0 tcp:10.0.7.10:6633
	
	}
    }
    services {OvsService}
    interface-peer {eth3 n11}
}

node n5 {
    type router
    model OVS
    network-config {
	hostname n5
	!
	interface eth1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {247.0 463.0}
    labelcoords {247.0 495.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n9}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	ovs-vsctl add-br ovsbr0
	route add -net default ovsbr0
	
	## Now add all our interfaces as ports to the switch
	ovs-vsctl add-port ovsbr0 eth0
	ovs-vsctl add-port ovsbr0 eth1
	
	ovs-ofctl add-flow ovsbr0 priority=1000,in_port=eth0,action=output:eth1
	ovs-ofctl add-flow ovsbr0 priority=1000,in_port=eth1,action=output:eth0
	}
    }
    services {OvsService}
}

node n9 {
    type router
    model OVS
    network-config {
	hostname n9
	!
	interface eth1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {464.0 419.0}
    labelcoords {464.0 451.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n2}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	ovs-vsctl add-br ovsbr0
	route add -net default ovsbr0
	
	## Now add all our interfaces as ports to the switch
	ovs-vsctl add-port ovsbr0 eth0
	ovs-vsctl add-port ovsbr0 eth1
	
	#Default flows
	ovs-ofctl add-flow ovsbr0 priority=1000,in_port=eth0,action=output:eth1
	ovs-ofctl add-flow ovsbr0 priority=1000,in_port=eth1,action=output:eth0
	}
    }
    services {OvsService}
}

node n11 {
    type router
    model host
    network-config {
	hostname controller
	!
	interface eth1
	 ip address 10.0.7.10/24
	 ipv6 address 2001:7::10/64
	!
	interface eth0
	 ip address 10.0.6.10/24
	 ipv6 address 2001:6::10/64
	!
    }
    canvas c1
    iconcoords {376.0 326.0}
    labelcoords {376.0 358.0}
    services {ryuService DefaultRoute SSH}
    interface-peer {eth0 n1}
    interface-peer {eth1 n2}
    custom-config {
	custom-config-id service:ryuService
	custom-command ryuService
	config {
	files=('ryuService.sh', )
	}
    }
    custom-config {
	custom-config-id service:ryuService:ryuService.sh
	custom-command ryuService.sh
	config {
	#!/bin/sh
	# auto-generated by ryuService (ryuService.py)
	ryu-manager --observe-links ryu.app.ofctl_rest ryu.app.rest_topology &
	
	
	##
	
	while true; do
	###Clear
	curl -X DELETE http://localhost:8080/stats/flowentry/clear/11141204
	curl -X DELETE http://localhost:8080/stats/flowentry/clear/11141206
	###Enable switch1_eth0->eth1
	curl -X POST -d '{ "dpid": 11141204, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":1 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 2, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	###Enable switch1_eth1->eth0
	curl -X POST -d '{ "dpid": 11141204, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":2 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 1, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	###Enable switch2_eth0->eth1
	curl -X POST -d '{ "dpid": 11141206, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":1 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 2, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	###Enable switch2_eth1->eth0
	curl -X POST -d '{ "dpid": 11141206, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":2 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 1, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	
	sleep 10
	###Clear
	curl -X DELETE http://localhost:8080/stats/flowentry/clear/11141204
	curl -X DELETE http://localhost:8080/stats/flowentry/clear/11141206
	###Enable switch1_eth0->eth2
	curl -X POST -d '{ "dpid": 11141204, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":1 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 3, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	###Enable switch1_eth2->eth0
	curl -X POST -d '{ "dpid": 11141204, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":3 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 1, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	###Enable switch2_eth1->eth3
	curl -X POST -d '{ "dpid": 11141206, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":2 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 3, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	###Enable switch2_eth3->eth1
	curl -X POST -d '{ "dpid": 11141206, "idle_timeout": 0, "hard_timeout": 0, "match":{ "in_port":3 }, "instructions": [ { "type": "APPLY_ACTIONS", "actions": [    { "port": 2, "type": "OUTPUT" } ] } ] }' http://localhost:8080/stats/flowentry/add
	
	sleep 10
	
	done;
	}
    }
}

link l6 {
    nodes {n3 n7}
    bandwidth 0
}

link l7 {
    nodes {n3 n8}
    bandwidth 0
}

link l1 {
    nodes {n6 n4}
    bandwidth 0
}

link l2 {
    nodes {n10 n4}
    bandwidth 0
}

link l3 {
    nodes {n4 n1}
    bandwidth 0
}

link l4 {
    nodes {n1 n2}
    bandwidth 0
}

link l5 {
    nodes {n2 n3}
    bandwidth 0
}

link l8 {
    nodes {n1 n5}
    bandwidth 0
}

link l9 {
    nodes {n5 n9}
    bandwidth 0
}

link l10 {
    nodes {n9 n2}
    bandwidth 0
}

link l11 {
    nodes {n11 n1}
    bandwidth 0
}

link l12 {
    nodes {n11 n2}
    bandwidth 0
}

annotation a1 {
    iconcoords {209.0 172.0 570.0 325.0}
    type rectangle
    label {Direct Route}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #03c029
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {203.0 349.0 568.0 503.0}
    type rectangle
    label {Alternate Route}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #bbc021
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {26.0 537.0}
    type text
    label {1. From "client" ping 10.0.2.20}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a4 {
    type text
    iconcoords {45.0 538.0}
    label {}
    canvas c1
}

annotation a5 {
    iconcoords {28.0 561.0}
    type text
    label {2. From n2, run "tcpdump -l icmp"}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a6 {
    iconcoords {101.0 588.0}
    type text
    label {-> non-stop request/reply}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a7 {
    iconcoords {28.0 616.0}
    type text
    label {3. From n5, run "tcpdump -l icmp"}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a8 {
    iconcoords {99.0 635.0}
    type text
    label {->request/reply show only for 10 second intervals}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a9 {
    iconcoords {195.0 88.0}
    type text
    label {n1, n2, n5, n9 are OVS switches}
    labelcolor black
    fontfamily {Arial}
    fontsize {16}
    canvas c1
}

annotation a10 {
    iconcoords {197.0 115.0}
    type text
    label {Traffic is redirected every 10 seconds (see OVS service for code)}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a11 {
    iconcoords {197.0 138.0}
    type text
    label {The controller is updating flows on n1 and n2}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
    mac_address_start 80
}

option session {
}

