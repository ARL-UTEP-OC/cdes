node n2 {
    type router
    model host
    network-config {
	hostname h2
	!
	interface eth0
	 ip address 10.0.0.10/24
	 ipv6 address 2001:0::10/64
	!
    }
    canvas c1
    iconcoords {561.0 219.0}
    labelcoords {561.0 251.0}
    services {DefaultRoute SSH}
    interface-peer {eth0 n6}
}

node n3 {
    type router
    model router
    network-config {
	hostname r1
	!
	interface eth1
	 ip address 10.0.4.1/24
	 mac address 00:00:00:aa:00:4a
	!
	interface eth0
	 ip address 10.0.1.1/24
	 mac address 00:00:00:aa:00:44
	!
    }
    canvas c1
    iconcoords {178.0 142.0}
    labelcoords {178.0 174.0}
    services {zebra OSPFv2 OSPFv3 IPForward}
    interface-peer {eth0 n7}
    interface-peer {eth1 n8}
}

node n4 {
    type router
    model router
    network-config {
	hostname r2
	!
	interface eth0
	 ip address 10.0.3.2/24
	 mac address 00:00:00:aa:00:3f
	!
    }
    canvas c1
    iconcoords {569.0 83.0}
    labelcoords {569.0 115.0}
    services {zebra OSPFv2 OSPFv3 IPForward}
    interface-peer {eth0 n5}
}

node n5 {
    type router
    model cc_node
    network-config {
	hostname cn1
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	 mac address 00:00:00:aa:00:47
	!
	interface eth1
	 ip address 10.0.3.1/24
	 ipv6 address 2001:3::1/64
	 mac address 00:00:00:aa:00:3e
	!
    }
    canvas c1
    iconcoords {422.0 74.0}
    labelcoords {422.0 106.0}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
    interface-peer {eth1 n4}
    interface-peer {eth0 n7}
}

node n6 {
    type router
    model cc_node
    network-config {
	hostname cn2
	!
	interface eth1
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
	interface eth0
	 ip address 10.0.1.3/24
	 mac address 00:00:00:aa:00:49
	!
    }
    canvas c1
    iconcoords {420.0 199.0}
    labelcoords {420.0 231.0}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
    interface-peer {eth0 n7}
    interface-peer {eth1 n2}
}

node n9 {
    type router
    model cc_node
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.4.2/24
	 mac address 00:00:00:aa:00:4d
	!
	interface eth1
	 ip address 10.0.5.1/24
	 mac address 00:00:00:aa:00:40
	!
    }
    canvas c1
    iconcoords {399.0 306.0}
    labelcoords {399.0 338.0}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
    interface-peer {eth1 n11}
    interface-peer {eth0 n8}
}

node n10 {
    type router
    model cc_node
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.4.3/24
	 mac address 00:00:00:aa:00:4f
	!
	interface eth1
	 ip address 10.0.6.1/24
	 mac address 00:00:00:aa:00:42
	!
    }
    canvas c1
    iconcoords {407.0 420.0}
    labelcoords {407.0 452.0}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
    interface-peer {eth1 n12}
    interface-peer {eth0 n8}
}

node n11 {
    type router
    model host
    network-config {
	hostname n11
	!
	interface eth0
	 ip address 10.0.5.10/24
	 mac address 00:00:00:aa:00:41
	!
    }
    canvas c1
    iconcoords {549.0 323.0}
    labelcoords {549.0 355.0}
    services {DefaultRoute SSH}
    interface-peer {eth0 n9}
}

node n12 {
    type router
    model host
    network-config {
	hostname n12
	!
	interface eth0
	 ip address 10.0.6.10/24
	 mac address 00:00:00:aa:00:43
	!
    }
    canvas c1
    iconcoords {555.0 457.0}
    labelcoords {555.0 489.0}
    services {DefaultRoute SSH}
    interface-peer {eth0 n10}
}

node n7 {
    type router
    model cc_dec_node_ovs
    network-config {
	hostname decnode1
	!
	interface eth2
	 mac address 00:00:00:aa:00:48
	!
	interface eth1
	 mac address 00:00:00:aa:00:46
	!
	interface eth0
	 mac address 00:00:00:aa:00:45
	!
    }
    canvas c1
    iconcoords {278.0 144.0}
    labelcoords {278.0 176.0}
    services {CC_DecisionNode_OVS}
    interface-peer {eth0 n3}
    interface-peer {eth1 n5}
    interface-peer {eth2 n6}
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS
	custom-command CC_DecisionNode_OVS
	config {
	files=('MyTrigger.py', 'MyMonitor.sh', 'start_ovs.sh', )
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:start_ovs.sh
	custom-command start_ovs.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode_OVS service
	## Start OVS service.
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch
	ovs-vsctl add-br ovsbr0
	
	## Add all our interfaces as ports to the switch
	## Remove ip addresses of eths.
	## Add the interface to the bridge
	ovs-vsctl add-port ovsbr0 eth0 -- set Interface eth0 ofport_request=1
	## Remove ip addresses of eths.
	## Add the interface to the bridge
	ovs-vsctl add-port ovsbr0 eth1 -- set Interface eth1 ofport_request=2
	## Remove ip addresses of eths.
	## Add the interface to the bridge
	ovs-vsctl add-port ovsbr0 eth2 -- set Interface eth2 ofport_request=3
	## Set the default device to the bridge so that it can handle where packets go
	ip route add default dev ovsbr0
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode_OVS service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will enable other honeynet after 20 seconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #initialize some variables
	        changed = False
	        start_time = 0
	        #get the CC_Nodes attached to this DES node
	        nodes = self.get_cc_node_numbers()
	        self.set_active_conn("eth0", disable_others=True)
	        self.set_active_conn("eth1", disable_others=False)
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # if data exists, we know it's epoch time; 
	            # read it as an integer
	            new_time = int(data)
	            if start_time == 0:
	                start_time = new_time
	            #enable other honeynet after 20 seconds
	            if (new_time - start_time >= 20) and changed == False:
	                print("Enabling second path")
	                self.set_active_conn("eth2", disable_others=False)
	                changed = True               
	####
	}
    }
}

node n8 {
    type router
    model cc_dec_node_ovs
    network-config {
	hostname decnode2
	!
	interface eth2
	 mac address 00:00:00:aa:00:4e
	!
	interface eth1
	 mac address 00:00:00:aa:00:4c
	!
	interface eth0
	 mac address 00:00:00:aa:00:4b
	!
    }
    canvas c1
    iconcoords {271.0 364.0}
    labelcoords {271.0 396.0}
    services {CC_DecisionNode_OVS}
    interface-peer {eth0 n3}
    interface-peer {eth1 n9}
    interface-peer {eth2 n10}
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS
	custom-command CC_DecisionNode_OVS
	config {
	files=('MyTrigger.py', 'MyMonitor.sh', 'start_ovs.sh', )
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:start_ovs.sh
	custom-command start_ovs.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode_OVS service
	## Start OVS service.
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch
	ovs-vsctl add-br ovsbr0
	
	## Add all our interfaces as ports to the switch
	## Remove ip addresses of eths.
	## Add the interface to the bridge
	ovs-vsctl add-port ovsbr0 eth0 -- set Interface eth0 ofport_request=1
	## Remove ip addresses of eths.
	## Add the interface to the bridge
	ovs-vsctl add-port ovsbr0 eth1 -- set Interface eth1 ofport_request=2
	## Remove ip addresses of eths.
	## Add the interface to the bridge
	ovs-vsctl add-port ovsbr0 eth2 -- set Interface eth2 ofport_request=3
	## Set the default device to the bridge so that it can handle where packets go
	ip route add default dev ovsbr0
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode_OVS service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will enable other honeynet after 30 seconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #initialize some variables
	        changed = False
	        start_time = 0
	        #get the CC_Nodes attached to this DES node
	        nodes = self.get_cc_node_numbers()
	        self.set_active_conn("eth0", disable_others=True)
	        self.set_active_conn("eth1", disable_others=False)
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # if data exists, we know it's epoch time; 
	            # read it as an integer
	            new_time = int(data)
	            if start_time == 0:
	                start_time = new_time
	            #enable other honeynet after 30 seconds
	            if (new_time - start_time >= 30) and changed == False:
	                print("Enabling 4th path")
	                self.set_active_conn("eth2", disable_others=False)
	                changed = True               
	####
	}
    }
}

link l1 {
    nodes {n5 n4}
}

link l2 {
    nodes {n9 n11}
}

link l3 {
    nodes {n10 n12}
}

link l4 {
    nodes {n3 n7}
}

link l5 {
    color blue
    nodes {n7 n5}
}

link l6 {
    color blue
    nodes {n7 n6}
}

link l7 {
    nodes {n3 n8}
}

link l8 {
    color blue
    nodes {n8 n9}
}

link l9 {
    color blue
    nodes {n8 n10}
}

link l10 {
    nodes {n6 n2}
    bandwidth 0
}

annotation a1 {
    iconcoords {308 27 602 124}
    type rectangle
    label {Legit Net 1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {304 145 621 253}
    type rectangle
    label {Honey Net 1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {293.0 265.0 582.0 352.0}
    type rectangle
    label {Legit Net 2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {299.0 375.0 591.0 489.0}
    type rectangle
    label {Honey Net 2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a5 {
    iconcoords {16.0 17.0}
    type text
    label {CDES supports multiple decision nodes (enables additional honeynets after 30 seconds).}
    labelcolor black
    fontfamily {Arial}
    fontsize {18}
    canvas c1
}

annotation a6 {
    iconcoords {249.0 501.0}
    type text
    label {Note: Allow ~60 seconds for routes to converge after switch before accessing deep nodes.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a7 {
    iconcoords {22.0 518.0}
    type text
    label {Instructions:}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a8 {
    iconcoords {25.0 538.0}
    type text
    label {1. Open 4 terminals from r1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a9 {
    iconcoords {25.0 556.0}
    type text
    label {2. ping 10.0.1.2, 10.0.1.3, 10.0.4.2 and 10.0.4.3}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a10 {
    iconcoords {27.0 572.0}
    type text
    label {(one in each terminal)}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a11 {
    type text
    iconcoords {30.0 596.0}
    label {}
    canvas c1
}

annotation a12 {
    iconcoords {6.0 598.0}
    type text
    label {Notice that 10.0.1.2 and 10.0.4.2 respond from the start}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a13 {
    iconcoords {6.0 616.0}
    type text
    label {10.0.1.3 responds after 20 seconds}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a14 {
    iconcoords {5.0 635.0}
    type text
    label {10.0.4.3 responds after 30 seconds}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state
python3 /home/researchdev/cdes/cdes_loader.py &
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api yes
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
    controlnet=
    controlnet0=
    controlnet1=
    controlnet2=
    controlnet3=
    controlnet_updown_script=
    enablerj45=1
    enablesdt=0
    ovs=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

