node n1 {
    type router
    model host
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.0.10/24
	 ipv6 address 2001:0::10/64
	!
    }
    canvas c1
    iconcoords {97.0 202.0}
    labelcoords {97.0 234.0}
    interface-peer {eth0 n2}
}

node n2 {
    type lanswitch
    network-config {
	hostname n2
	!
    }
    canvas c1
    iconcoords {219.0 201.0}
    labelcoords {219.0 225.0}
    interface-peer {e0 n1}
    interface-peer {e1 n3}
    interface-peer {e2 n4}
    services {CC_DecisionNode}
    custom-config {
	custom-config-id service:CC_DecisionNode:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will swap between nodes every 10 milliseconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # if data exists, we know it's epoch time; 
	            # read it as an integer
	            new_time = int(data)
	            #get the cc_node numbers
	            nodes = self.get_cc_node_numbers()
	            #set active node every 10 seconds
	            if new_time % 10 == 0:
	                if new_time %20 == 0:
	                    self.set_active_conn(nodes[0])
	                else:
	                    self.set_active_conn(nodes[2])
	####
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode
	custom-command CC_DecisionNode
	config {
	files=('MyMonitor.sh', 'MyTrigger.py', )
	}
    }
    interface-peer {e3 n10}
}

node n3 {
    type router
    model cc_node
    network-config {
	hostname n3
	!
	interface eth1
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
    }
    canvas c1
    iconcoords {338.0 126.0}
    labelcoords {338.0 158.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n5}
}

node n4 {
    type router
    model cc_node
    network-config {
	hostname n4
	!
	interface eth1
	 ip address 10.0.3.1/24
	 ipv6 address 2001:3::1/64
	!
	interface eth0
	 ip address 10.0.0.2/24
	 ipv6 address 2001:0::2/64
	!
    }
    canvas c1
    iconcoords {346.0 264.0}
    labelcoords {346.0 296.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n7}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth1
	 ip address 10.0.2.1/24
	 ipv6 address 2001:2::1/64
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	!
    }
    canvas c1
    iconcoords {457.0 107.0}
    labelcoords {457.0 139.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n6}
}

node n6 {
    type lanswitch
    network-config {
	hostname n6
	!
    }
    canvas c1
    iconcoords {580.0 109.0}
    labelcoords {580.0 133.0}
    interface-peer {e0 n5}
    interface-peer {e1 n8}
    interface-peer {e2 n9}
    custom-config {
	custom-config-id service:CC_DecisionNode:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will swap between nodes every 10 milliseconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # if data exists, we know it's epoch time; 
	            # read it as an integer
	            new_time = int(data)
	            #get the cc_node numbers
	            nodes = self.get_cc_node_numbers()
	            #set active node every 10 seconds
	            if new_time % 10 == 0:
	                if new_time %20 == 0:
	                    self.set_active_conn(nodes[0])
	                else:
	                    self.set_active_conn(nodes[1])
	####
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
}

node n7 {
    type router
    model host
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.3.10/24
	 ipv6 address 2001:3::10/64
	!
    }
    canvas c1
    iconcoords {443.0 346.0}
    labelcoords {443.0 378.0}
    interface-peer {eth0 n4}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.2.20/24
	 ipv6 address 2001:2::20/64
	!
    }
    canvas c1
    iconcoords {691.0 67.0}
    labelcoords {691.0 99.0}
    interface-peer {eth0 n6}
}

node n9 {
    type router
    model PC
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.2.21/24
	 ipv6 address 2001:2::21/64
	!
    }
    canvas c1
    iconcoords {666.0 165.0}
    labelcoords {666.0 197.0}
    interface-peer {eth0 n6}
}

node n10 {
    type router
    model cc_node
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.0.3/24
	 ipv6 address 2001:0::3/64
	!
    }
    canvas c1
    iconcoords {211.0 336.0}
    labelcoords {211.0 368.0}
    interface-peer {eth0 n2}
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l2 {
    color yellow
    nodes {n2 n3}
}

link l3 {
    color yellow
    nodes {n2 n4}
}

link l4 {
    nodes {n3 n5}
    bandwidth 0
}

link l5 {
    nodes {n5 n6}
    bandwidth 0
}

link l6 {
    nodes {n4 n7}
    bandwidth 0
}

link l7 {
    nodes {n6 n8}
    bandwidth 0
}

link l8 {
    nodes {n6 n9}
    bandwidth 0
}

link l9 {
    color blue
    nodes {n2 n10}
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state
python /home/researchdev/git/cdes/cdes_loader.py &
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api yes
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

