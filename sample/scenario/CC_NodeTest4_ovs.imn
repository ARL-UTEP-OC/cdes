node n3 {
    type wlan
    network-config {
	hostname wlan3
	!
	interface e2
	!
	interface e1
	!
	interface e0
	!
	interface wireless
	 ip address 10.0.0.0/32
	 ipv6 address 2001:0::0/128
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {807.0 134.0}
    labelcoords {807.0 166.0}
    interface-peer {e0 n5}
    interface-peer {e1 n6}
    interface-peer {e2 n7}
}

node n4 {
    type wlan
    network-config {
	hostname wlan4
	!
	interface e2
	!
	interface e1
	!
	interface e0
	!
	interface wireless
	 ipv6 address 2001:1::0/128
	 ip address 10.0.0.0/32
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {805.0 228.0}
    labelcoords {805.0 260.0}
    interface-peer {e0 n8}
    interface-peer {e1 n9}
    interface-peer {e2 n10}
}

node n5 {
    type router
    model mdr
    network-config {
	hostname n5
	!
	interface eth1
	 ip address 10.0.2.2/24
	!
	interface eth0
	 ip address 10.0.0.1/32
	!
    }
    canvas c1
    iconcoords {425.0 69.0}
    labelcoords {425.0 101.0}
    interface-peer {eth0 n3}
    services {OSPFv2 OSPFv3MDR zebra IPForward}
    interface-peer {eth1 n1}
}

node n6 {
    type router
    model mdr
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.0.2/32
	!
    }
    canvas c1
    iconcoords {616.0 56.0}
    labelcoords {616.0 88.0}
    interface-peer {eth0 n3}
}

node n7 {
    type router
    model mdr
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.0.3/32
	!
    }
    canvas c1
    iconcoords {773.0 56.0}
    labelcoords {773.0 88.0}
    interface-peer {eth0 n3}
}

node n8 {
    type router
    model mdr
    network-config {
	hostname n8
	!
	interface eth1
	 ip address 10.0.3.2/24
	!
	interface eth0
	 ip address 10.0.0.1/32
	!
    }
    canvas c1
    iconcoords {426.0 283.0}
    labelcoords {426.0 315.0}
    interface-peer {eth0 n4}
    services {OSPFv2 OSPFv3MDR zebra IPForward}
    interface-peer {eth1 n2}
}

node n9 {
    type router
    model mdr
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.0.10/32
	!
    }
    canvas c1
    iconcoords {637.0 288.0}
    labelcoords {637.0 320.0}
    interface-peer {eth0 n4}
}

node n10 {
    type router
    model mdr
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.0.11/32
	!
    }
    canvas c1
    iconcoords {769.0 296.0}
    labelcoords {769.0 328.0}
    interface-peer {eth0 n4}
}

node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.1.1/24
	 mac address 00:00:00:00:00:aa
	!
	interface eth1
	 ip address 10.0.2.1/24
	!
    }
    canvas c1
    iconcoords {246.0 123.0}
    labelcoords {246.0 155.0}
    interface-peer {eth1 n5}
    interface-peer {eth0 n11}
}

node n2 {
    type router
    model router
    network-config {
	hostname altn1
	!
	interface eth0
	 mac address 00:00:00:00:00:aa
	 ip address 10.0.1.1/24
	!
	interface eth1
	 ip address 10.0.3.1/24
	!
    }
    canvas c1
    iconcoords {262.0 254.0}
    labelcoords {262.0 286.0}
    interface-peer {eth1 n8}
    interface-peer {eth0 n11}
}

node n12 {
    type router
    model PC
    network-config {
	hostname UntrustedNode
	!
	interface eth0
	 ip address 10.0.1.20/24
	!
    }
    canvas c1
    iconcoords {54.0 197.0}
    labelcoords {54.0 229.0}
    interface-peer {eth0 n11}
}

node n11 {
    type router
    model cc_dec_node_ovs
    network-config {
	hostname decnode
	!
	interface eth2
	!
	interface eth1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {166.0 175.0}
    labelcoords {166.0 207.0}
    interface-peer {eth0 n12}
    interface-peer {eth1 n1}
    interface-peer {eth2 n2}
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode_OVS service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will swap between nodes every 15 seconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #get the cc_node numbers
	        nodes = self.get_cc_node_numbers()
	        self.set_active_conn("eth0", disable_others=True)
	        self.set_active_conn("eth1", disable_others=False)
	        #use a counter to trigger call to swap
	        count = 1
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # assuming we get one update per second
	            count = count + 1
	            new_time = int(data)
	            #set active node every 15 seconds
	            if count == 15:
	                self.set_active_conn("eth0", disable_others=True)
	                self.set_active_conn("eth2", disable_others=False)
	            if count == 30:
	                self.set_active_conn("eth0", disable_others=True)
	                self.set_active_conn("eth1", disable_others=False)
	                count = 1
	####
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode_OVS service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
}

link l1 {
    nodes {n3 n5}
}

link l2 {
    nodes {n3 n6}
}

link l3 {
    nodes {n3 n7}
}

link l4 {
    nodes {n4 n8}
}

link l5 {
    nodes {n4 n9}
}

link l6 {
    nodes {n4 n10}
}

link l9 {
    nodes {n1 n5}
    bandwidth 0
}

link l10 {
    nodes {n2 n8}
    bandwidth 0
}

link l7 {
    color blue
    nodes {n12 n11}
}

link l8 {
    color blue
    nodes {n11 n1}
}

link l11 {
    color yellow
    nodes {n11 n2}
}

annotation a1 {
    iconcoords {209.0 8.0 849.0 173.0}
    type rectangle
    label {Honey 1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {216.0 198.0 848.0 369.0}
    type rectangle
    label {Honey 2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {33.0 402.0}
    type text
    label {1. Open two terminals on UntrustedNode}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a4 {
    type text
    iconcoords {57.0 219.0}
    label {}
    canvas c1
}

annotation a5 {
    iconcoords {33.0 427.0}
    type text
    label {2. ping 10.0.0.3}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a6 {
    iconcoords {33.0 449.0}
    type text
    label {3. ping 10.0.0.11}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a7 {
    iconcoords {36.0 480.0}
    type text
    label {Wait for ~60 seconds for ping responses}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a8 {
    iconcoords {36.0 504.0}
    type text
    label {Replies will alternate between wireless networks}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
#__author__ = "Jaime C. Acosta"
#__license__ = "GPL 3.0"

###CHANGE THE FOLLOWING LINE TO THE DIRECTORY WITH YOUR CODE##
CODE_PATH=/home/researchdev/cdes/


######DO NOT MODIFY (UNLESS YOU KNOW WHAT YOU"RE DOING)#######
python3 $CODE_PATH/cdes_loader.py &
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

