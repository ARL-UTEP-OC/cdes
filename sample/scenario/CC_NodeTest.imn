node n13 {
    type lanswitch
    network-config {
	hostname decnode
	!
    }
    canvas c1
    iconcoords {228.0 302.0}
    labelcoords {228.0 326.0}
    services {CC_DecisionNode}
    interface-peer {e1 n2}
    interface-peer {e0 n6}
    interface-peer {e2 n3}
    custom-config {
	custom-config-id service:CC_DecisionNode
	custom-command CC_DecisionNode
	config {
	files=('MyMonitor.sh', 'MyTrigger.py', )
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will swap between nodes every 30 seconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        nodes = self.get_cc_node_numbers()
	        self.set_active_conn(nodes[1], True)
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # if data exists, we know it's epoch time; 
	            # read it as an integer
	            new_time = int(data)
	            #get the cc_node numbers
	            #set active node every 30 seconds
	            if new_time % 30 == 0:
	                self.set_active_conn(nodes[1])
	            elif new_time %15 == 0:
	                self.set_active_conn(nodes[0])                       
	####
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
}

node n2 {
    type router
    model host
    network-config {
	hostname outclient
	!
	interface eth0
	 ip address 10.0.1.10/24
	!
    }
    canvas c1
    iconcoords {150.0 387.0}
    labelcoords {150.0 419.0}
    interface-peer {eth0 n13}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth2
	 mac address 00:00:00:00:00:aa
	 ip address 10.0.1.1/24
	!
	interface eth1
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {238.0 188.0}
    labelcoords {237.0 170.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n4}
    interface-peer {eth2 n13}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
    custom-image /usr/local/share/core/icons/normal/router_black.gif
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth1
	 ip address 10.0.3.1/24
	!
	interface eth0
	 ip address 10.0.2.2/24
	!
    }
    canvas c1
    iconcoords {380.0 213.0}
    labelcoords {379.0 193.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n5}
}

node n5 {
    type router
    model host
    network-config {
	hostname legitserver
	!
	interface eth0
	 ip address 10.0.3.10/24
	!
    }
    canvas c1
    iconcoords {514.0 162.0}
    labelcoords {514.0 194.0}
    interface-peer {eth0 n4}
}

node n1 {
    type router
    model PC
    network-config {
	hostname legitclient
	!
	interface eth0
	 ip address 10.0.0.20/24
	!
    }
    canvas c1
    iconcoords {90.0 212.0}
    labelcoords {90.0 244.0}
    interface-peer {eth0 n3}
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth0
	 mac address 00:00:00:00:00:aa
	 ip address 10.0.1.1/24
	!
	interface eth1
	 ip address 10.0.4.1/24
	!
    }
    canvas c1
    iconcoords {350.0 357.0}
    labelcoords {350.0 389.0}
    interface-peer {eth0 n13}
    interface-peer {eth1 n7}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
    custom-image /usr/local/share/core/icons/normal/router_black.gif
}

node n7 {
    type router
    model host
    network-config {
	hostname honeyserver
	!
	interface eth0
	 ip address 10.0.4.10/24
	!
    }
    canvas c1
    iconcoords {502.0 399.0}
    labelcoords {502.0 431.0}
    interface-peer {eth0 n6}
}

link l1 {
    nodes {n2 n13}
    bandwidth 0
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

link l3 {
    nodes {n3 n4}
    bandwidth 0
}

link l4 {
    nodes {n4 n5}
    bandwidth 0
}

link l5 {
    color Blue
    nodes {n13 n6}
}

link l6 {
    nodes {n6 n7}
    bandwidth 0
}

link l7 {
    color blue
    nodes {n13 n3}
}

annotation a1 {
    iconcoords {26.0 131.0 635.0 260.0}
    type rectangle
    label {Legitimate Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {246.0 313.0 600.0 463.0}
    type rectangle
    label {Honey Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {98.0 326.0 239.0 431.0}
    type rectangle
    label {Untrusted Node}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c04b
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {199.0 262.0 270.0 314.0}
    type rectangle
    label {Decision Maker}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #19be56
    width 0
    border black
    rad 20
    canvas c1
}

annotation a5 {
    iconcoords {7.0 87.0}
    type text
    label {An untrusted node is conditionally connected to either the legitimate or honeynet.}
    labelcolor black
    fontfamily {Arial}
    fontsize {18}
    canvas c1
}

annotation a6 {
    type text
    iconcoords {266.0 98.0}
    label {}
    canvas c1
}

annotation a7 {
    iconcoords {310.0 286.0}
    type text
    label {Allow ~60 seconds for routes to converge before accessing deep nodes.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a8 {
    iconcoords {69.0 108.0}
    type text
    label {Changes every 15 seconds.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state
python3 /home/researchdev/cdes/cdes_loader.py &
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api yes
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

