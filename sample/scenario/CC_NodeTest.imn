node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth1
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
    }
    canvas c1
    iconcoords {204.0 155.0}
    labelcoords {204.0 187.0}
    interface-peer {eth1 n3}
}

node n3 {
    type lanswitch
    network-config {
	hostname n3
	!
    }
    canvas c1
    iconcoords {319.0 205.0}
    labelcoords {319.0 229.0}
    interface-peer {e0 n1}
    interface-peer {e1 n4}
    interface-peer {e2 n5}
    services {CC_DecisionNode}
    custom-config {
	custom-config-id service:CC_DecisionNode:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will swap between nodes every 10 milliseconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # if data exists, we know it's epoch time; 
	            # read it as an integer
	            new_time = int(data)
	            #get the cc_node numbers
	            nodes = self.get_cc_node_numbers()
	            #set active node every 10 seconds
	            if new_time % 10 == 0:
	                if new_time %20 == 0:
	                    self.set_active_conn(nodes[0])
	                else:
	                    self.set_active_conn(nodes[1])
	####
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
}

node n4 {
    type router
    model cc_node
    network-config {
	hostname n4
	!
	interface eth1
	 ip address 10.0.3.1/24
	 ipv6 address 2001:3::1/64
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	!
    }
    canvas c1
    iconcoords {380.0 109.0}
    labelcoords {380.0 141.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n6}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
}

node n5 {
    type router
    model cc_node
    network-config {
	hostname n5
	!
	interface eth3
	 ip address 10.0.5.1/24
	 ipv6 address 2001:5::1/64
	!
	interface eth2
	 ip address 10.0.4.1/24
	 ipv6 address 2001:4::1/64
	!
	interface eth1
	 ip address 10.0.2.1/24
	 ipv6 address 2001:2::1/64
	!
	interface eth0
	 ip address 10.0.1.3/24
	 ipv6 address 2001:1::3/64
	!
    }
    canvas c1
    iconcoords {382.0 273.0}
    labelcoords {381.0 305.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n7}
    interface-peer {eth2 n8}
    interface-peer {eth3 n9}
    services {OSPFv2 OSPFv3 zebra CC_Node IPForward}
}

node n6 {
    type router
    model host
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.3.10/24
	 ipv6 address 2001:3::10/64
	!
    }
    canvas c1
    iconcoords {528.0 85.0}
    labelcoords {528.0 117.0}
    interface-peer {eth0 n4}
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth1
	 ip address 10.0.6.1/24
	 ipv6 address 2001:6::1/64
	!
	interface eth0
	 ip address 10.0.2.2/24
	 ipv6 address 2001:2::2/64
	!
    }
    canvas c1
    iconcoords {511.0 279.0}
    labelcoords {511.0 311.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n10}
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth1
	 ip address 10.0.7.1/24
	 ipv6 address 2001:7::1/64
	!
	interface eth0
	 ip address 10.0.4.2/24
	 ipv6 address 2001:4::2/64
	!
    }
    canvas c1
    iconcoords {507.0 388.0}
    labelcoords {507.0 420.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n11}
}

node n9 {
    type router
    model router
    network-config {
	hostname n9
	!
	interface eth1
	 ip address 10.0.8.1/24
	 ipv6 address 2001:8::1/64
	!
	interface eth0
	 ip address 10.0.5.2/24
	 ipv6 address 2001:5::2/64
	!
    }
    canvas c1
    iconcoords {405.0 447.0}
    labelcoords {405.0 479.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n12}
}

node n10 {
    type router
    model host
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.6.10/24
	 ipv6 address 2001:6::10/64
	!
    }
    canvas c1
    iconcoords {661.0 271.0}
    labelcoords {661.0 303.0}
    interface-peer {eth0 n7}
}

node n11 {
    type router
    model host
    network-config {
	hostname n11
	!
	interface eth0
	 ip address 10.0.7.10/24
	 ipv6 address 2001:7::10/64
	!
    }
    canvas c1
    iconcoords {647.0 416.0}
    labelcoords {647.0 448.0}
    interface-peer {eth0 n8}
}

node n12 {
    type router
    model host
    network-config {
	hostname n12
	!
	interface eth0
	 ip address 10.0.8.10/24
	 ipv6 address 2001:8::10/64
	!
    }
    canvas c1
    iconcoords {478.0 534.0}
    labelcoords {478.0 566.0}
    interface-peer {eth0 n9}
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

link l3 {
    color blue
    nodes {n3 n4}
}

link l4 {
    color yellow
    nodes {n3 n5}
}

link l5 {
    nodes {n5 n7}
    bandwidth 0
}

link l6 {
    nodes {n4 n6}
    bandwidth 0
}

link l7 {
    nodes {n5 n8}
    bandwidth 0
}

link l8 {
    nodes {n5 n9}
    bandwidth 0
}

link l9 {
    nodes {n7 n10}
    bandwidth 0
}

link l10 {
    nodes {n8 n11}
    bandwidth 0
}

link l11 {
    nodes {n9 n12}
    bandwidth 0
}

annotation a1 {
    iconcoords {304.0 9.0 650.0 167.0}
    type rectangle
    label {HoneyNet1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {292.0 236.0 717.0 568.0}
    type rectangle
    label {HoneyNet2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {151.0 597.0}
    type text
    label {N1 is conditionally connected to one of two honey nets.}
    labelcolor black
    fontfamily {Arial}
    fontsize 18
    canvas c1
}

annotation a4 {
    iconcoords {256.0 596.0}
    type text
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize 18
    canvas c1
}

annotation a5 {
    type text
    iconcoords {278.0 596.0}
    label {}
    canvas c1
}

annotation a6 {
    type text
    iconcoords {318.0 603.0}
    label {}
    canvas c1
}

annotation a7 {
    iconcoords {362.0 202.0}
    type text
    label {Allow time for routes to converge before accessing deep nodes.}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a8 {
    type text
    iconcoords {155.0 268.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state
python /home/researchdev/cdes/cdes_loader.py &
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

