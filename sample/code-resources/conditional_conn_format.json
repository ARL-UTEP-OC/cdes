{
   "3": {
      "connected_nodes": [
         {
            "cc_mac": "00:00:00:aa:00:02", 
            "number": "1", 
            "cc_ip4_mask": "24", 
            "cc_nic": "eth1", 
            "node_type": "other", 
            "cc_ip6_mask": "64", 
            "cc_ip4": "10.0.1.1", 
            "role": "cc_node", 
            "cc_ip6": "2001:1::1", 
            "connected": "False"
         }, 
         {
            "cc_mac": "00:00:00:aa:00:03", 
            "number": "4", 
            "cc_ip4_mask": "24", 
            "cc_nic": "eth0", 
            "node_type": "other", 
            "cc_ip6_mask": "64", 
            "cc_ip4": "10.0.1.2", 
            "role": "cc_node", 
            "cc_ip6": "2001:1::2", 
            "connected": "False"
         }, 
         {
            "cc_mac": "00:00:00:aa:00:04", 
            "number": "5", 
            "cc_ip4_mask": "24", 
            "cc_nic": "eth0", 
            "node_type": "other", 
            "cc_ip6_mask": "64", 
            "cc_ip4": "10.0.1.3", 
            "role": "cc_node", 
            "cc_ip6": "2001:1::3", 
            "connected": "False"
         }, 
         {
            "connected": "False", 
            "node_type": "SWITCH", 
            "role": "cc_node", 
            "number": "13"
         }, 
         {
            "connected": "False", 
            "node_type": "SWITCH", 
            "role": "cc_node", 
            "number": "14"
         }
      ], 
      "MyTrigger.py": "# auto-generated by CC_DecisionNode service\n# Short python to implement Trigger.\n# The following three items are important:\n# 1. You must write the process_data(self) function\n# 2. Read the input (from the Monitor) by calling self.read_input_line()\n# 3. Call the self.active_conn method with the cc node number as a parameter.\n# The following is a sample that reads time information from the Monitor and \n# will swap between nodes every 10 milliseconds\n\nimport time\n#Required import\nfrom Trigger.trigger import Trigger\n\n#Required class name that inherits Trigger\nclass MyTrigger(Trigger):  \n    \n    #Required function\n    def process_data(self):\n        #forever loop to process data\n        while True:\n####Modify to process Monitor's data and Trigger a switch####\n            # read a line of input (from Monitor's stdout)\n            data = self.read_input_line()\n            print(\"READ: \" + str(data))\n            #if data yet exists, restart loop\n            if data == None:\n                continue\n            # if data exists, we know it's epoch time; \n            # read it as an integer\n            new_time = int(data)\n            #get the cc_node numbers\n            nodes = self.get_cc_node_numbers()\n            #set active node every 10 seconds\n            if new_time % 10 == 0:\n                if new_time %20 == 0:\n                    self.set_active_conn(nodes[0])\n                else:\n                    self.set_active_conn(nodes[1])\n####\n\n", 
      "MyMonitor.sh": "#!/bin/sh\n# auto-generated by CC_DecisionNode service\n# Call any/all scripts needed for the Monitor.\n# The stdout from this code will be given to MyTrigger.py for processing.\n# This is an example of using epoch time as the monitor data\n\nwhile [ True ]\ndo\nsleep 1\ndate +%s\ndone\n\n", 
      "name": "n3", 
      "MySwapper.py": ""
   }, 
   "13": {
      "connected_nodes": [
         {
            "connected": "False", 
            "node_type": "SWITCH", 
            "role": "cc_node", 
            "number": "3"
         }, 
         {
            "cc_mac": "00:00:00:aa:00:14", 
            "number": "16", 
            "cc_ip4_mask": "24", 
            "cc_nic": "eth0", 
            "node_type": "other", 
            "cc_ip6_mask": "64", 
            "cc_ip4": "10.0.1.11", 
            "role": "cc_node", 
            "cc_ip6": "2001:1::11", 
            "connected": "False"
         }
      ], 
      "MyTrigger.py": "# auto-generated by CC_DecisionNode service\n# Short python to implement Trigger.\n# The following three items are important:\n# 1. You must write the process_data(self) function\n# 2. Read the input (from the Monitor) by calling self.read_input_line()\n# 3. Call the self.active_conn method with the cc node number as a parameter.\n# The following is a sample that reads time information from the Monitor and \n# will swap between nodes every 10 milliseconds\n\nimport time\n#Required import\nfrom Trigger.trigger import Trigger\n\n#Required class name that inherits Trigger\nclass MyTrigger(Trigger):  \n    \n    #Required function\n    def process_data(self):\n        #forever loop to process data\n        while True:\n####Modify to process Monitor's data and Trigger a switch####\n            # read a line of input (from Monitor's stdout)\n            data = self.read_input_line()\n            print(\"READ: \" + str(data))\n            #if data yet exists, restart loop\n            if data == None:\n                continue\n            # if data exists, we know it's epoch time; \n            # read it as an integer\n            new_time = int(data)\n            #get the cc_node numbers\n            nodes = self.get_cc_node_numbers()\n            #set active node every 10 seconds\n            if new_time % 20 == 0:\n                self.set_active_conn(nodes[1])                \n            elif new_time %10 == 0:\n                self.set_active_conn(nodes[0])                       \n####\n\n", 
      "MyMonitor.sh": "#!/bin/sh\n# auto-generated by CC_DecisionNode service\n# Call any/all scripts needed for the Monitor.\n# The stdout from this code will be given to MyTrigger.py for processing.\n# This is an example of using epoch time as the monitor data\n\nwhile [ True ]\ndo\nsleep 1\ndate +%s\ndone\n\n", 
      "name": "n13", 
      "MySwapper.py": ""
   }, 
   "14": {
      "connected_nodes": [
         {
            "connected": "False", 
            "node_type": "SWITCH", 
            "role": "cc_node", 
            "number": "3"
         }, 
         {
            "cc_mac": "00:00:00:aa:00:13", 
            "number": "15", 
            "cc_ip4_mask": "24",
            "cc_nic": "eth0", 
            "node_type": "other", 
            "cc_ip6_mask": "64", 
            "cc_ip4": "10.0.1.10", 
            "role": "cc_node", 
            "cc_ip6": "2001:1::10", 
            "connected": "False"
         }
      ], 
      "MyTrigger.py": "# auto-generated by CC_DecisionNode service\n# Short python to implement Trigger.\n# The following three items are important:\n# 1. You must write the process_data(self) function\n# 2. Read the input (from the Monitor) by calling self.read_input_line()\n# 3. Call the self.active_conn method with the cc node number as a parameter.\n# The following is a sample that reads time information from the Monitor and \n# will swap between nodes every 10 milliseconds\n\nimport time\n#Required import\nfrom Trigger.trigger import Trigger\n\n#Required class name that inherits Trigger\nclass MyTrigger(Trigger):  \n    \n    #Required function\n    def process_data(self):\n        #forever loop to process data\n        while True:\n####Modify to process Monitor's data and Trigger a switch####\n            # read a line of input (from Monitor's stdout)\n            data = self.read_input_line()\n            print(\"READ: \" + str(data))\n            #if data yet exists, restart loop\n            if data == None:\n                continue\n            # if data exists, we know it's epoch time; \n            # read it as an integer\n            new_time = int(data)\n            #get the cc_node numbers\n            nodes = self.get_cc_node_numbers()\n            #set active node every 10 seconds\n            if new_time % 20 == 0:\n                self.set_active_conn(nodes[1])                \n            elif new_time %10 == 0:\n                self.set_active_conn(nodes[0])                       \n####\n\n", 
      "MyMonitor.sh": "#!/bin/sh\n# auto-generated by CC_DecisionNode service\n# Call any/all scripts needed for the Monitor.\n# The stdout from this code will be given to MyTrigger.py for processing.\n# This is an example of using epoch time as the monitor data\n\nwhile [ True ]\ndo\nsleep 1\ndate +%s\ndone\n\n", 
      "name": "n14", 
      "MySwapper.py": ""
   }
}
