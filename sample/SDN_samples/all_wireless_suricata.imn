node n13 {
    type router
    model cc_dec_node_ovs
    network-config {
	hostname decnode
	!
	interface eth0
	!
	interface eth2
	!
	interface eth1
	!
    }
    canvas c1
    iconcoords {456.0 343.0}
    labelcoords {456.0 375.0}
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS
	custom-command CC_DecisionNode_OVS
	config {
	files=('MyMonitor.sh', 'MyTrigger.py', 'start_ovs.sh', )
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will swap between nodes every 30 seconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #forever loop to process data
	        numAlerts = 0
		#enable only two interfaces
	        self.set_active_conn("eth0", disable_others=True)
	        self.set_active_conn("eth1", disable_others=False)
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            if "1100001" in data:
	                # if data exists, we know there was an alert; 
	                # let's switch if there are more than 10 alerts
	                numAlerts = numAlerts + 1
	                if numAlerts == 20:
	                    #set active node
	                    self.set_active_conn("eth0", disable_others=True)
	                    self.set_active_conn("eth2", disable_others=False)
	####
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing
	
	tail /tmp/suricata-out/fast.log -f
	
	}
    }
    services {CC_DecisionNode_OVS}
    interface-peer {eth1 n7}
    interface-peer {eth2 n6}
    interface-peer {eth0 n2}
}

node n1 {
    type router
    model mdr
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.5.2/32
	!
    }
    canvas c1
    iconcoords {568.0 431.0}
    labelcoords {568.0 463.0}
    interface-peer {eth0 n6}
    services {OSPFv3MDR zebra IPForward}
}

node n3 {
    type router
    model mdr
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 10.0.5.3/32
	!
    }
    canvas c1
    iconcoords {729.0 474.0}
    labelcoords {729.0 506.0}
    interface-peer {eth0 n6}
}

node n4 {
    type router
    model mdr
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.5.4/32
	!
    }
    canvas c1
    iconcoords {910.0 458.0}
    labelcoords {910.0 490.0}
    interface-peer {eth0 n6}
}

node n5 {
    type router
    model mdr
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 10.0.5.3/32
	!
    }
    canvas c1
    iconcoords {717.0 209.0}
    labelcoords {717.0 241.0}
    interface-peer {eth0 n7}
}

node n8 {
    type router
    model mdr
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.5.2/32
	!
    }
    canvas c1
    iconcoords {565.0 236.0}
    labelcoords {565.0 268.0}
    interface-peer {eth0 n7}
}

node n9 {
    type router
    model mdr
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.5.4/32
	!
    }
    canvas c1
    iconcoords {915.0 160.0}
    labelcoords {915.0 192.0}
    interface-peer {eth0 n7}
}

node n6 {
    type wlan
    network-config {
	hostname wlan6
	!
	interface e3
	!
	interface e2
	!
	interface e1
	!
	interface e0
	!
	interface wireless
	 ip address 10.0.5.0/32
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {911.0 392.0}
    labelcoords {911.0 424.0}
    interface-peer {e0 n4}
    interface-peer {e1 n3}
    interface-peer {e2 n1}
    interface-peer {e3 n13}
}

node n7 {
    type wlan
    network-config {
	hostname wlan7
	!
	interface e3
	!
	interface e2
	!
	interface e1
	!
	interface e0
	!
	interface wireless
	 ip address 10.0.5.0/32
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {908.0 230.0}
    labelcoords {908.0 262.0}
    interface-peer {e0 n9}
    interface-peer {e1 n8}
    interface-peer {e2 n5}
    interface-peer {e3 n13}
}

node n10 {
    type wlan
    network-config {
	hostname wlan10
	!
	interface e3
	!
	interface e2
	!
	interface e1
	!
	interface e0
	!
	interface wireless
	 ipv6 address 2001:0::0/128
	 ip address 10.0.0.0/32
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {101.0 471.0}
    labelcoords {101.0 503.0}
    interface-peer {e0 n2}
    interface-peer {e1 n11}
    interface-peer {e2 n12}
    interface-peer {e3 n14}
}

node n2 {
    type router
    model mdr
    network-config {
	hostname n2
	!
	interface eth1
	 ip address 10.0.5.1/32
	!
	interface eth0
	 ip address 10.0.0.1/32
	!
    }
    canvas c1
    iconcoords {315.0 373.0}
    labelcoords {315.0 405.0}
    interface-peer {eth0 n10}
    interface-peer {eth1 n13}
    services {OSPFv3MDR zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.0.1/32
	  
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	interface eth1
	  ip address 10.0.5.1/32
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	!
	router ospf6
	  instance-id 65
	  router-id 10.0.0.1
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	!
	
	}
    }
}

node n11 {
    type router
    model mdr
    network-config {
	hostname n11
	!
	interface eth0
	 ip address 10.0.0.2/32
	!
    }
    canvas c1
    iconcoords {106.0 343.0}
    labelcoords {106.0 375.0}
    interface-peer {eth0 n10}
}

node n12 {
    type router
    model mdr
    network-config {
	hostname n12
	!
	interface eth0
	 ip address 10.0.0.3/32
	!
    }
    canvas c1
    iconcoords {174.0 437.0}
    labelcoords {174.0 469.0}
    interface-peer {eth0 n10}
}

node n14 {
    type router
    model mdr
    network-config {
	hostname n14
	!
	interface eth0
	 ip address 10.0.0.4/32
	!
    }
    canvas c1
    iconcoords {306.0 453.0}
    labelcoords {306.0 485.0}
    interface-peer {eth0 n10}
}

link l2 {
    nodes {n7 n9}
}

link l3 {
    nodes {n7 n8}
}

link l4 {
    nodes {n7 n5}
}

link l5 {
    color blue
    nodes {n7 n13}
}

link l6 {
    nodes {n6 n4}
}

link l7 {
    nodes {n6 n3}
}

link l8 {
    nodes {n6 n1}
}

link l9 {
    color yellow
    nodes {n6 n13}
}

link l1 {
    nodes {n10 n2}
}

link l13 {
    color blue
    nodes {n2 n13}
}

link l10 {
    nodes {n10 n11}
}

link l11 {
    nodes {n10 n12}
}

link l12 {
    nodes {n10 n14}
}

annotation a1 {
    iconcoords {529 372 955 505}
    type rectangle
    label {Legitimate Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {488.0 130.0 946.0 267.0}
    type rectangle
    label {Honey Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {71 315 390 500}
    type rectangle
    label {Field Sensors}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c04b
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {404 298 523 358}
    type rectangle
    label {Decision Maker}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #19be56
    width 0
    border black
    rad 20
    canvas c1
}

annotation a5 {
    iconcoords {7.0 87.0}
    type text
    label {An untrusted node is conditionally connected to either the legitimate or honeynet.}
    labelcolor black
    fontfamily {Arial}
    fontsize {18}
    canvas c1
}

annotation a6 {
    type text
    iconcoords {266.0 98.0}
    label {}
    canvas c1
}

annotation a8 {
    iconcoords {69.0 108.0}
    type text
    label {Changes after 20 ICMP packets from 10.0.0.0/24}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a17 {
    type text
    iconcoords {189.0 623.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:suricatastart_runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

echo "" > /tmp/suricata-out/fast.log

if [ -f /etc/suricata/suricata-debian.yaml ]
then
  SURICATA_YAML=/etc/suricata/suricata-debian.yaml
else
  SURICATA_YAML=/etc/suricata/suricata.yaml
fi

INTERFACES=`find /sys/class/net/ -mindepth 1 -maxdepth 1 -name 'vethd.*' -printf '-i %f '`

echo suricata -c $SURICATA_YAML -l /tmp/suricata-out/ -S /tmp/suricata-out/rules/custom.rules $INTERFACES --pidfile /tmp/suricata.pid -D > /tmp/suricommand.txt

suricata -c $SURICATA_YAML -l /tmp/suricata-out/ -S /tmp/suricata-out/rules/custom.rules $INTERFACES --pidfile /tmp/suricata.pid -D
}

hook 3:suricatarule_instantiation_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

mkdir /tmp/suricata-out/
mkdir /tmp/suricata-out/rules

cat << EOF > /tmp/suricata-out/rules/custom.rules

alert icmp 10.0.0.0/24 any -> any any (msg:"ICMP packet"; sid:1100001; rev:1;)
EOF
}

hook 6:suricatastop_shutdown_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

kill `cat /tmp/suricata.pid`
}

hook 4:startcdes_runtime_hook.sh {
#!/bin/sh
###CHANGE THE FOLLOWING LINE TO THE DIRECTORY WITH YOUR CODE##
CODE_PATH=/home/researchdev/cdes/


######DO NOT MODIFY (UNLESS YOU KNOW WHAT YOU"RE DOING)#######
python3 $CODE_PATH/cdes_loader.py &
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api yes
    background_images no
    annotations yes
    grid yes
    traffic_start 0
    mac_address_start 80
}

option session {
}

